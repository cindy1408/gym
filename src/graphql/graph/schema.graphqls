# GraphQL schema example
#
# https://gqlgen.com/getting-started/

extend type Query {
  baseExercises: [BaseExercise]!
  getAllAvailableBaseExercises: [String!]!
  getAllEachExercise: [EachExercise!]!
  getUserWorkoutPlansByEmail(input: String!): UserWorkoutPlan!
  getAllUserWorkoutPlans: [UserWorkoutPlan!]!
  getMuscleSpecifics(input: muscleSpecificInput): String!
  getAllUsers: [User!]!
}

extend type Mutation {
  createBaseExercise(input: baseExerciseInput): BaseExercise!
  updateBaseExercise(input: baseExerciseInput): BaseExercise!
  hydrateBaseExercise: [BaseExercise]!
  hydrateMuscleGroups: [MuscleGroup]!
  hydrateSpecificParts: [SpecificParts]!
  createUser(input: CreateUserInput!): User!
  addUserWorkout(input: AddUserWorkoutInput!): UserWorkoutPlan!
  increaseRep(input: increaseRepInput!): UserWorkoutPlan!
}
# used to check muscle input is valid
type MuscleGroup {
  name: String!
}
# used to check specific parts input is valid
type SpecificParts {
  name: String!
  muscleGroup: String!
}

type AvoidGiven  {
  name: String!
}

# base Exercise are pre-field exercises 
type BaseExercise  {
    name: String!
    muscleGroup: String!
    specificParts: String!
    level: Int! 
    avoidGiven: String
    movementType: String!
}
# table that consists of users info and a link to user workoutPlanID 
type User  {
  firstName: String! 
  lastName: String!
  email: String!
  password: String!
  UserWorkoutPlanId: String
}

# user workout plan consists of userID, workoutID and name of the day eg. Push day
type UserWorkoutPlan  {
    id: String!
    userId: String! 
    gymDay: String!
}

# Each Exercise has the unique id, with all the info of the exercise and linked to userWorkoutPlanID 
type EachExercise  {
    id: String! 
    userWorkoutPlanID: String!
    name: String!
    weight: Int!
    Unit: String!
    Sets: Int!
    Reps: Int!
}

input AddUserWorkoutInput {
  userEmail: String!
  gymDay: String! 
  exercises: [EachExerciseInput]
}

input EachExerciseInput {
    name: String!
    weight: Int!
    Unit: String!
    Sets: Int!
    Reps: Int!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input baseExerciseInput {
    name: String!
    muscleGroup: String!
    specificParts: String!
    level: Int! 
    avoidGiven: String
    movementType: String!
}

input muscleSpecificInput {
  name: String!
  MuscleGroup: String!
}

input increaseRepInput {
  userID: String!
  gymDay: String!
  exerciseName: String!
}