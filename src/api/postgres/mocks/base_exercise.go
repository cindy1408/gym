// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cindy1408/gym/src/graphql/graph/postgres (interfaces: BaseExercise)

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	context "context"
	reflect "reflect"

	model "github.com/cindy1408/gym/src/api/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBaseExercise is a mock of BaseExercise interface.
type MockBaseExercise struct {
	ctrl     *gomock.Controller
	recorder *MockBaseExerciseMockRecorder
}

// MockBaseExerciseMockRecorder is the mock recorder for MockBaseExercise.
type MockBaseExerciseMockRecorder struct {
	mock *MockBaseExercise
}

// NewMockBaseExercise creates a new mock instance.
func NewMockBaseExercise(ctrl *gomock.Controller) *MockBaseExercise {
	mock := &MockBaseExercise{ctrl: ctrl}
	mock.recorder = &MockBaseExerciseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseExercise) EXPECT() *MockBaseExerciseMockRecorder {
	return m.recorder
}

// AddBaseExercise mocks base method.
func (m *MockBaseExercise) AddBaseExercise(arg0 context.Context, arg1 *gorm.DB, arg2 *model.BaseExerciseInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBaseExercise", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBaseExercise indicates an expected call of AddBaseExercise.
func (mr *MockBaseExerciseMockRecorder) AddBaseExercise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBaseExercise", reflect.TypeOf((*MockBaseExercise)(nil).AddBaseExercise), arg0, arg1, arg2)
}

// DeleteBaseExerciseByName mocks base method.
func (m *MockBaseExercise) DeleteBaseExerciseByName(arg0 *gorm.DB, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBaseExerciseByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBaseExerciseByName indicates an expected call of DeleteBaseExerciseByName.
func (mr *MockBaseExerciseMockRecorder) DeleteBaseExerciseByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBaseExerciseByName", reflect.TypeOf((*MockBaseExercise)(nil).DeleteBaseExerciseByName), arg0, arg1)
}

// GetAllBaseExercise mocks base method.
func (m *MockBaseExercise) GetAllBaseExercise(arg0 context.Context, arg1 *gorm.DB) ([]*model.BaseExercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBaseExercise", arg0, arg1)
	ret0, _ := ret[0].([]*model.BaseExercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBaseExercise indicates an expected call of GetAllBaseExercise.
func (mr *MockBaseExerciseMockRecorder) GetAllBaseExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBaseExercise", reflect.TypeOf((*MockBaseExercise)(nil).GetAllBaseExercise), arg0, arg1)
}

// GetBaseExerciseByName mocks base method.
func (m *MockBaseExercise) GetBaseExerciseByName(arg0 context.Context, arg1 *gorm.DB, arg2 string) (*model.BaseExercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseExerciseByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.BaseExercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseExerciseByName indicates an expected call of GetBaseExerciseByName.
func (mr *MockBaseExerciseMockRecorder) GetBaseExerciseByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseExerciseByName", reflect.TypeOf((*MockBaseExercise)(nil).GetBaseExerciseByName), arg0, arg1, arg2)
}

// HydrateBaseExercise mocks base method.
func (m *MockBaseExercise) HydrateBaseExercise(arg0 context.Context, arg1 *gorm.DB) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HydrateBaseExercise", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HydrateBaseExercise indicates an expected call of HydrateBaseExercise.
func (mr *MockBaseExerciseMockRecorder) HydrateBaseExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HydrateBaseExercise", reflect.TypeOf((*MockBaseExercise)(nil).HydrateBaseExercise), arg0, arg1)
}

// Increase mocks base method.
func (m *MockBaseExercise) Increase(arg0 context.Context, arg1 *gorm.DB, arg2 model.IncreaseInput, arg3 model.Details) (*model.EachExercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.EachExercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increase indicates an expected call of Increase.
func (mr *MockBaseExerciseMockRecorder) Increase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increase", reflect.TypeOf((*MockBaseExercise)(nil).Increase), arg0, arg1, arg2, arg3)
}

// UpdateBaseExercise mocks base method.
func (m *MockBaseExercise) UpdateBaseExercise(arg0 context.Context, arg1 *gorm.DB, arg2 *model.BaseExerciseInput) (*model.BaseExercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBaseExercise", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.BaseExercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBaseExercise indicates an expected call of UpdateBaseExercise.
func (mr *MockBaseExerciseMockRecorder) UpdateBaseExercise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseExercise", reflect.TypeOf((*MockBaseExercise)(nil).UpdateBaseExercise), arg0, arg1, arg2)
}

// ValidateBaseExercise mocks base method.
func (m *MockBaseExercise) ValidateBaseExercise(arg0 context.Context, arg1 *gorm.DB, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBaseExercise", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateBaseExercise indicates an expected call of ValidateBaseExercise.
func (mr *MockBaseExerciseMockRecorder) ValidateBaseExercise(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBaseExercise", reflect.TypeOf((*MockBaseExercise)(nil).ValidateBaseExercise), arg0, arg1, arg2)
}
