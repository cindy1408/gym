# gym

setting up structure with graphql 

go mod init github.com/cindy1408/gym 

cd src/cmd/graphql
go get github.com/99designs/gqlgen

this creates the structure 
go run github.com/99designs/gqlgen init 

to generate the schema and gen file 
path: /graphql 
go run github.com/99designs/gqlgen generate 



THE STRUCTURE 

gym/
├── src
│   ├── cmd
|       ├── go-graphql
|           ├── <code for the GraphQL api>
│   ├── pkg
|       ├── todo
|           ├── <ToDo Interface - no implementations>
|       ├── postgres
|           ├── <Postgres implementation of the ToDo Interface>



model/model_gen.go: 
this is file with structs generated by gqlgen, defined by the schema file schema.graphqls

generated/generated.go: 
this is a file with generated code that injects context and middleware for each query and mutation.

schema.graphqls: 
a GraphQL schema file where types, queries, and mutations are defined. The schema file uses schema-definition-language (SDL) to describe data types and operations (queries/mutations) in a human-readable way.

schema.resolvers.go: 
a go file with wrapper code for queries and mutations defined in schema.graphqls


if the schema changes, we need to regenerate the code using:
path: /graphql  
go run github.com/99designs/gqlgen generate
go run server.go


GORM: 

go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres



NEXT STEP: 

Hydrating directly to the database - DONE

Create User - DONE 

Read https://thenewstack.io/understanding-golang-packages/

Get all User - done

Get User Id by Email && check if email is valid - done 

connect user id with exercise name, reps and sets (AddUserWorkout) - done 

To be able to update baseExercise - done 

ERD diagram - done 

set up docker 

look into gorm migrate (migrate schema and create tables keeping them up to date)

to match the schema with the ERD diagram (tables) 

Look into docker compose up and docker compose down 








// container is called gym, user is postgres with password as password
docker run --name gym -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres

// to  pre-populated database we need a docker file and docker image 

// creates the image and tells Docker to build an image from the Dockerfile and give it a name of 'gym-db'
docker build -t gym-db ./

// to view docker image 

docker images -a

// to run the container 

docker run -d --name gym -p 5432:5432 gym-db

// to restart container 

docker restart gym 


BEEKEEPER 
username: postgres
password: password
database: gym 


Lucid Chart: 
https://lucid.app/lucidchart/2b62e2a3-fb97-41d0-8c08-7e5f957995fd/edit?beaconFlowId=4DE20C2BAB41862D&invitationId=inv_31987717-db28-48b9-bac4-a495b79506d9&page=0_0#