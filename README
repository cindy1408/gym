# gym

setting up structure with graphql 

go mod init github.com/cindy1408/gym 

cd src/cmd/graphql
go get github.com/99designs/gqlgen

this creates the structure 
go run github.com/99designs/gqlgen init 

to generate the schema and gen file 
path: /graphql 
go run github.com/99designs/gqlgen generate 



THE STRUCTURE 

gym/
├── src
│   ├── cmd
|       ├── go-graphql
|           ├── <code for the GraphQL api>
│   ├── pkg
|       ├── todo
|           ├── <ToDo Interface - no implementations>
|       ├── postgres
|           ├── <Postgres implementation of the ToDo Interface>



model/model_gen.go: 
this is file with structs generated by gqlgen, defined by the schema file schema.graphqls

generated/generated.go: 
this is a file with generated code that injects context and middleware for each query and mutation.

schema.graphqls: 
a GraphQL schema file where types, queries, and mutations are defined. The schema file uses schema-definition-language (SDL) to describe data types and operations (queries/mutations) in a human-readable way.

schema.resolvers.go: 
a go file with wrapper code for queries and mutations defined in schema.graphqls


if the schema changes, we need to regenerate the code using:
path: /graphql  
go run github.com/99designs/gqlgen generate
go run server.go



Database 

using postgres through docker 

visit https://hub.docker.com/ and find the images needed (this case it was postgres)

in the terminal: 

(to login to your account)
$docker login 



in this case: 
docker run --name gym -p 5432:5432 -e POSTGRES_PASSWORD=password -d postgres

to stop postgres 
$docker stop gym

checks what's running 
docker ps 

need to remove the container and then run it again. 
docker rm gym

GORM: 

go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres



NEXT STEP: 

Hydrating directly to the database - DONE

Create User - DONE 

Read https://thenewstack.io/understanding-golang-packages/

Get all User - done

Get User Id by Email && check if email is valid - done 

connect user id with exercise name, reps and sets (AddUserWorkout) - done 

To be able to update baseExercise - done 

to match the schema with the ERD diagram (tables)

Look into docker compose up and docker compose down 

